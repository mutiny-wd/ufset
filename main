#include<iostream>
using namespace std;
struct ufset
{
	int parent[11];
	int len;
};

void Initset(ufset &s, int n);
int Find(ufset s, int i);
void Union(ufset &s, int i, int j);
int main()
{
	int a, b;
	int k,i;
	a = k = 0;
	ufset U;
	Initset(U, 11);
	while ( 1)
	{
		cin >> a >> b;
		if (a == -1 && b == -1)
			break;
		int x, y;
		x = Find(U, a);
		y = Find(U, b);
		Union(U, x, y);
	}
	
	for (i = 1; i < U.len; i++)
		if (U.parent[i] < U.parent[k])
			k = i;
	for (i = 0; i < U.len; i++)
		if (Find(U, i) == k)
			cout << i << " ";
	return 0;
}
void Initset(ufset &s, int n)
{
	for (int i = 0; i < n; i++)
		s.parent[i] = -1;
	s.len = n;
}
int Find(ufset s, int i)
{
	while (s.parent[i] >= 0)
		i = s.parent[i];
	return i;
}
void Union(ufset &s, int i, int j)
{
	int c;
	c = s.parent[i] + s.parent[j];
	if (i == j)
		return;
	if (s.parent[j] < s.parent[i])
	{
		s.parent[i] = j;
		s.parent[j] = c;
	}
	else
	{
		s.parent[j] = i;
		s.parent[i] = c;
	}

}
